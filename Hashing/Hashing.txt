// WHAT IS A HASH TABLE?
Hash tables are used to store key-value pairs.

They are like arrays, but the keys are not ordered.

Unlike arrays, hash tables are fast for all of the following operations: finding values, adding new values, and removing values!

// THE HASH PART

To implement a hash table, we'll be using an array.In order to look up values by key, we need a way to convert keys into valid array indices.A function that performs this task is called a hash function.

// Dealing with Collisions

Even with a large array and a great hash function, collisions are inevitable. 
There are many strategies for dealing with collisions, but we'll focus on two:

* Separate Chaining -> With separate chaining, at each index in our array we store values using a more sophisticated data structure (e.g. an array or a linked list).This allows us to store multiple key-value pairs at the same index.

* Linear Probing -> With linear probing, when we find a collision, we search through the array to find the next empty slot.Unlike with separate chaining, this allows us to store a single key-value at each index.

-------------------------------------------------------------------------------------------------------------

SET ->

Accepts a key and a value
Hashes the key
Stores the key-value pair in the hash table array via separate chaining


GET ->

Accepts a key
Hashes the key
Retrieves the key-value pair in the hash table
If the key isn't found, returns undefined

Keys / Values

      * keys ->
Loops through the hash table array and returns an array of keys in the table

      * values ->
Loops through the hash table array and returns an array of values in the table